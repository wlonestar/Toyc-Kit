//! Interpreter implementation

#include <CodeGen.h>
#include <Interpreter.h>
#include <Parser.h>

#include <llvm/IR/Verifier.h>
#include <llvm/Support/FileSystem.h>
#include <llvm/Support/raw_ostream.h>

#include <cstdlib>
#include <exception>
#include <sstream>

namespace toyc {

/// Open the file for writing
void Interpreter::writeByteCode(std::string &filename) {
  int fd;
  std::error_code ec = llvm::sys::fs::openFileForWrite(
      filename, fd, llvm::sys::fs::CD_CreateAlways, llvm::sys::fs::OF_None);
  if (ec) {
    llvm::errs() << "error opening file: " << ec.message() << "\n";
    exit(EXIT_FAILURE);
  }
  /// Create raw_fd_ostream using the file descriptor
  llvm::raw_fd_ostream File(fd, true);
  /// print out generated byte code both into file and standard error
  /// TODO: need to be improved
  visitor.modulePrint(File, nullptr);
}

void Interpreter::compile(std::string &input) {
  /// support incremental parser
  parser.addInput(input);
  try {
    /// parse the input incrementally
    auto decl = parser.parse();
    /// if the result is not null, print the generated AST
    /// and generate IR code to global Context
    if (decl != nullptr) {
      std::stringstream ss;
      decl->dump(ss);
      std::cout << ss.str();
    }
    IRCodegenVisitor visitor;
    visitor.codegen(*decl);
    // printVariableTable();
  } catch (LexerError e) {
    std::cerr << e.what() << "\n";
    return;
  } catch (ParserError e) {
    std::cerr << e.what() << "\n";
    return;
#ifndef DEBUG
    /// catch error for release version
  } catch (...) {
    std::cerr << "there is something wrong in compiler inner\n";
    return;
#endif
  }

  /// TODO: need to be improved
  visitor.modulePrint(llvm::errs(), nullptr);

  /// verify Module and print out error info
  std::string info = "\033[1;31m";
  llvm::raw_string_ostream ros(info);
  /// TODO: need to be improved
  visitor.verifyModule(&ros);
  info.append("\033[0m");
  std::cout << info;

  /// Specify the filename
  std::string filename = "a.ll";
  writeByteCode(filename);
}

} // namespace toyc
