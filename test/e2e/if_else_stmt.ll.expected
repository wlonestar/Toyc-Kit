; ModuleID = 'test/e2e/if_else_stmt.toyc'
source_filename = "test/e2e/if_else_stmt.toyc"
target triple = "x86_64-pc-linux-gnu"

declare i64 @printi64ln(i64)

define i64 @foo(i64 %0) {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 4
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 1
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load i64, ptr %2, align 4
  br label %18

7:                                                ; preds = %1
  %8 = load i64, ptr %2, align 4
  %9 = icmp eq i64 %8, 2
  br i1 %9, label %10, label %13

10:                                               ; preds = %7
  %11 = load i64, ptr %2, align 4
  %12 = add nsw i64 %11, 1
  br label %16

13:                                               ; preds = %7
  %14 = load i64, ptr %2, align 4
  %15 = add nsw i64 %14, 2
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i64 [ %12, %10 ], [ %15, %13 ]
  br label %18

18:                                               ; preds = %16, %5
  %19 = phi i64 [ %6, %5 ], [ %17, %16 ]
  ret i64 %19
}

define i64 @main() {
  %1 = call i64 @foo(i64 1)
  %2 = call i64 @printi64ln(i64 %1)
  %3 = call i64 @foo(i64 2)
  %4 = call i64 @printi64ln(i64 %3)
  %5 = call i64 @foo(i64 3)
  %6 = call i64 @printi64ln(i64 %5)
  %7 = call i64 @foo(i64 4)
  %8 = call i64 @printi64ln(i64 %7)
  ret i64 %8
}
